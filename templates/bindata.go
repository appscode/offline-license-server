// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.html
// pricing.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcf\x6e\x1b\x37\x13\xbf\x7f\x4f\x31\xe1\x25\x97\x6f\xc5\xf8\xd6\x06\xdc\x45\x5b\xdb\x87\xa0\x45\x1b\xd4\x41\x8b\x1e\x29\x72\xa4\x65\xcc\x25\x09\xce\xac\x12\xa1\xe8\xbb\x17\xdc\x5d\xd9\xb2\x56\x89\x15\xdb\x02\xea\x83\xb5\xc3\xf9\xff\x23\x39\xc3\x51\xaf\xae\x7e\xbb\xfc\xf0\xd7\xfb\x6b\x68\xb9\xf3\xcd\xff\xd4\xf8\x03\xa0\x5a\xd4\xb6\x7c\x00\xa8\x0e\x59\x83\x69\x75\x26\xe4\x5a\xf4\xbc\xaa\xbe\x13\x20\xf7\x99\x41\x77\x58\x8b\x8d\xc3\x4f\x29\x66\x16\x60\x62\x60\x0c\x5c\x8b\x4f\xce\x72\x5b\x5b\xdc\x38\x83\xd5\x40\xfc\x1f\x5c\x70\xec\xb4\xaf\xc8\x68\x8f\xf5\xc5\xbd\x29\x76\xec\xb1\xf9\x31\x25\xba\x8c\x16\xe1\x17\x67\x30\x10\xc2\x0d\xe6\x0d\x66\x25\x47\xf6\x28\xea\x5d\xb8\x1d\xbe\x00\x32\xfa\x5a\x10\x6f\x3d\x52\x8b\xc8\x62\x5a\x6e\x33\xae\x6a\xd1\x32\x27\x7a\x2b\xa5\xb1\x61\xf1\x91\x2c\x7a\xb7\xc9\x8b\x80\x2c\x43\xea\xe4\xb2\xf7\x9d\xfe\xe1\xcd\xe2\xfb\xc5\x1b\x69\x88\x46\x7a\xd1\xb9\xb0\x30\x44\xa3\x9d\x21\x34\x25\x77\x60\xa8\x65\xb4\xdb\x29\x04\x42\xc3\x2e\x06\x30\x5e\x13\xd5\x62\x22\x45\x33\xf9\x57\xd6\x6d\x76\xbc\x02\x87\x76\x01\xf3\x1d\xb7\x00\x7c\xb1\x63\x0f\x89\xed\xb1\x00\xbe\x80\xc1\xbd\xb2\x6c\x2f\xf6\x4c\xad\x62\xee\x40\x0f\xfe\x6b\x21\x1d\x51\x8f\x95\x1f\x35\x05\x74\xc8\x6d\xb4\xb5\x48\x91\xf8\x81\x93\xfd\x08\x57\x0e\xbd\x7d\xc0\x2d\x20\xeb\x25\xfa\x9d\xc4\x40\x88\xe6\x57\xdd\xa1\x92\x03\x71\x20\x7d\x90\x6f\x8e\xfe\xc0\x1e\x80\x72\x21\xf5\x7c\xb0\x08\xd3\xe9\x29\xff\xc5\x8c\x37\x59\x1c\x14\xe7\x5c\xde\x26\xac\x05\xe3\xe7\x23\xbc\xe4\xb5\xc1\x36\x7a\x8b\xb9\x16\x87\x6c\x79\x10\xbc\xb4\x6e\xf3\x00\x9b\xd9\xc2\x53\xc0\xfa\x33\xe6\x5b\xb8\xee\xb4\xf3\xe7\x81\x0c\x8b\xe9\xa7\x61\xf6\x05\xd5\xaf\x82\x06\xb0\xd1\xbe\xc7\x6f\x47\x13\x40\xbd\xaa\x2a\x50\x69\x17\x5a\x8b\x3e\x81\xa3\xca\xea\xb0\x2e\xb7\xe2\x43\xeb\x08\x86\x90\xc0\x11\xb8\xb0\xd1\xde\x59\x25\x53\x03\x55\xf5\xf2\xdb\xf2\x3e\x47\xdb\x1b\x7e\xfa\x9e\xec\xc9\x10\x7a\x34\x3c\x13\x19\xea\x43\xe1\x80\x2b\x57\x6f\x74\x28\xa6\x6d\xdb\x91\x73\x25\x00\x15\xd3\x50\x55\x26\xa4\x89\x35\xb5\x15\x06\xc6\x9c\xb2\xa3\x23\x17\xa4\xfc\x35\x37\x45\x0c\xae\xef\xc4\xe0\xda\xba\x62\x46\xc9\xd1\xdc\x11\xad\x93\x9d\x9b\xd8\x75\x7d\x70\xbc\xfd\xaa\xef\xcb\x9d\xd4\xcb\xb8\xbe\xed\x97\x68\x97\x8f\x27\xfe\x73\xbf\xc4\xab\x9f\x5e\x3c\xf3\xc9\xfd\x63\xa9\x4f\xde\xcf\x90\xfb\x46\xf7\x9e\x4f\x4b\xff\x8f\x22\x7a\x16\x04\xc6\x20\x4e\x01\x61\x8c\xe1\x0c\x38\x94\xce\x76\x1a\x0c\x43\x0f\x3c\x07\x0a\x43\x08\xa7\x80\x30\x44\xf0\x3c\x0c\x94\x1c\xab\xc6\xac\xe2\x1c\xa9\xa8\xe7\x69\x59\x25\x91\x1c\x90\x91\xe0\xd2\xf7\xc4\x98\xe1\xdd\xd5\x79\xba\x97\x19\xed\xff\x67\x7a\x3e\x1c\x69\x50\x2e\xac\xa2\x68\x7e\xef\x03\x94\x13\xa0\x83\x7d\x0b\xca\x44\x8b\x4d\x39\x19\x86\x3d\xac\x91\x21\x10\x14\xb2\xa2\x2d\x31\x76\x50\xc5\xfa\x23\xc5\x90\x34\xb7\xf5\xeb\xbf\x17\xe5\x81\x6c\x35\xeb\x45\xef\xec\x3f\xaf\x95\x1c\xd4\x4b\x6f\x7b\xd6\xde\x9d\x02\xfe\x83\xfd\x35\x2d\x9a\xdb\x65\xfc\x7c\xac\x55\x0d\x48\x4f\xbb\x42\xda\x23\x89\x09\xe5\x3b\xa5\xdd\x85\xe0\xdc\xa3\x80\x61\x19\xad\x9c\x9b\xba\x2c\x2f\x5d\xc3\xd0\x21\x64\x5c\xeb\x6c\x5d\x58\x43\xea\xb3\x69\x35\x95\x4f\x1d\xf6\xef\xe8\xf4\xba\x9d\x1d\xf6\x63\xa7\xed\xf9\xc7\xfd\x6c\x90\x71\x7c\x04\xb0\x23\x40\xbd\x03\xbd\xce\x88\xc0\x11\xb8\x3d\x44\x00\x40\xe9\x83\x01\x46\xa7\x44\xe5\xe4\x2c\x4c\xec\xa4\xc7\xb5\xf6\x92\x23\xc9\x63\xe5\xa8\x61\xcc\x1d\x81\x0e\xb6\xcc\x61\x63\x15\x22\x25\xf5\x4c\x74\x5e\x65\x5e\x06\xf8\x72\x71\xd6\x39\xf6\x09\x9f\xb4\x07\xcb\x9e\xf9\x7e\xae\x9a\x28\x47\x55\x99\xf9\x44\x73\xd3\x2f\x3b\xc7\x4a\x8e\xeb\xdf\x16\xab\x92\xa5\x46\xdf\x4d\x68\xf7\xcc\x52\x77\x87\xf1\x69\x1c\xf7\xc6\x29\x4f\xc9\x71\x18\xfe\x37\x00\x00\xff\xff\x1e\xa7\x0b\x28\x24\x0f\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3876, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pricingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x5f\x4f\x1b\x39\x10\x7f\xbf\x4f\x31\xf8\xf9\x36\x86\xb7\xbb\x93\x37\x3a\x2e\x70\x95\x5a\xa4\x46\x02\xa9\xe2\xa9\xf2\xda\x93\xac\x8b\xd7\x76\xed\xd9\xd0\x7c\xfb\xca\xbb\x1b\xc8\x1f\x5a\x20\x90\x0a\xf5\x29\x1e\xcf\x1f\xcf\xfc\x66\x76\xf4\x8b\x38\x3a\xfb\x38\xb9\xba\x9e\x9e\x43\x4d\x8d\x1d\xff\x21\xfa\x1f\x00\x51\xa3\xd4\xf9\x00\x20\x1a\x24\x09\xaa\x96\x31\x21\x95\xac\xa5\x59\xf1\x17\x03\xbe\xae\x74\xb2\xc1\x92\x2d\x0c\xde\x06\x1f\x89\x81\xf2\x8e\xd0\x51\xc9\x6e\x8d\xa6\xba\xd4\xb8\x30\x0a\x8b\x4e\xf8\x13\x8c\x33\x64\xa4\x2d\x92\x92\x16\xcb\x93\xfb\x50\x64\xc8\xe2\xf8\x34\x84\x34\xf1\x1a\x61\x1a\xbd\x6e\x15\xc1\x34\x1a\x65\xdc\x1c\x2e\x4c\x22\xc1\x7b\xa3\xde\xc1\x1a\x77\xd3\x9d\x00\x22\xda\x92\x25\x5a\x5a\x4c\x35\x22\xb1\xe1\xba\x8e\x38\x2b\x59\x4d\x14\xd2\x3f\x9c\x2b\xed\x46\x5f\x92\x46\x6b\x16\x71\xe4\x90\xb8\x0b\x0d\xaf\x5a\xdb\xc8\x7f\x8f\x47\x7f\x8f\x8e\xb9\x4a\xa9\x97\x47\x8d\x71\x23\x95\x52\x1f\xa7\x4b\x50\xf0\x15\x24\xa2\xf2\x7a\x39\xa4\x90\x50\x91\xf1\x0e\x94\x95\x29\x95\x6c\x10\xd9\x78\x78\x5f\x68\xb3\x58\xe9\x32\x28\xd2\x38\x8c\x77\xda\x0c\xf3\xc9\x4a\xdd\x15\xc6\x1e\x2b\xbf\x3e\x59\x73\x9e\xf9\xd8\x80\xec\x5e\x2c\x19\xc7\x46\x1a\x5b\x7c\x6d\x3d\x21\x83\x06\xa9\xf6\xba\x64\xc1\x27\x5a\x7b\x6f\x33\xa3\x99\x41\xab\x37\xb4\x19\x54\x59\xa1\x5d\x59\x74\x02\x1b\xff\x6f\x62\xa2\xae\xcb\x82\x77\x57\x5b\x3e\x5b\x55\x46\x6f\xb7\xa2\x02\x08\xe3\x42\x4b\x5b\x97\x30\x4c\xce\x2c\xc7\xff\x9c\xcf\x6c\xc7\x62\x88\xdb\xb9\xef\x6a\x69\x19\xb0\x64\x84\xdf\x1e\xd0\x05\x2b\x15\xd6\xde\x6a\x8c\x25\xdb\x56\xf3\xad\x12\xb8\x36\x8b\x0d\x9c\x76\x2e\xf6\x01\xee\x42\x1e\x14\x37\x2b\xdf\x28\x6c\x2f\xc5\xed\x93\x8f\x37\x70\x9e\x07\xfa\x30\xc0\x75\xdf\xca\x7e\xa0\xfd\xc0\xf5\xa7\xa8\x01\x2c\xa4\x6d\xf1\xf9\x70\x02\x88\xa3\xa2\x00\x11\x56\xa9\xd5\x68\x03\x98\x54\x68\xe9\xe6\x79\x93\x5c\xd5\x26\x41\x97\x12\x98\x04\xc6\x2d\xa4\x35\x5a\xf0\x30\x86\xa2\x38\x40\x5f\xde\xfb\x0a\xba\x45\xf5\xc2\xb6\x0c\x6d\xe8\x77\xde\x26\xec\xeb\xb3\xb9\x85\xea\xaf\x9a\xbe\x69\xed\xdd\x2b\x55\x18\x72\xa8\xb7\x57\xe1\xc4\x37\x41\xba\xe5\x01\x57\x93\xea\x5f\xf8\x2d\xb7\xd3\xc4\xb7\x8e\xe2\xf2\x75\x26\x44\xf5\xc1\xde\xde\x8c\x0c\x04\x64\xff\x2a\xd7\x6c\x12\x5a\x54\xb4\x63\xd2\x11\xa8\xac\x01\x93\xb9\x4a\xff\x20\x5b\x7d\x3a\x83\xb8\xeb\x04\x20\x7c\xe8\x68\xd7\xb0\x56\x13\xc9\x54\x17\x41\x2e\xe7\x6c\x7c\x99\xcf\x30\x3d\xbd\x7e\x27\x78\x6f\xf5\x84\x00\x37\x6d\x85\xba\x1a\x22\x7c\x68\x2b\x3c\xfb\xef\x91\x10\x82\xf7\x99\xef\x54\xfd\xc0\x0a\xdf\xa3\x41\x79\xc7\xcf\xa3\x6f\x03\xee\xf4\xea\x29\xd0\x57\x2d\xd1\x3d\x2b\x1d\x24\x93\x8a\xcc\x98\xd9\xf8\xb2\xad\x1a\x43\x82\xf7\xf7\xcf\x23\x42\x82\x67\xd6\x79\xc7\x6f\xef\x95\x19\x10\xb5\xc2\x4a\xf0\x9e\x23\x0b\xde\xff\xa1\xf8\x1e\x00\x00\xff\xff\xda\x81\x4a\x05\x68\x0c\x00\x00")

func pricingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pricingHtml,
		"pricing.html",
	)
}

func pricingHtml() (*asset, error) {
	bytes, err := pricingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pricing.html", size: 3176, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html":   indexHtml,
	"pricing.html": pricingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html":   {indexHtml, map[string]*bintree{}},
	"pricing.html": {pricingHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
